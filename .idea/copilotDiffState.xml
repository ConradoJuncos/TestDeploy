<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/Dockerfile">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Dockerfile" />
              <option name="updatedContent" value="# Stage 1: Build&#10;FROM maven:3.9.4-eclipse-temurin-17 AS builder&#10;&#10;WORKDIR /app&#10;&#10;# Copy pom.xml and download dependencies&#10;COPY pom.xml .&#10;RUN mvn dependency:go-offline&#10;&#10;# Copy source code&#10;COPY src ./src&#10;&#10;# Build the application&#10;RUN mvn clean package -DskipTests&#10;&#10;# Stage 2: Runtime&#10;FROM eclipse-temurin:17-jre-alpine&#10;&#10;WORKDIR /app&#10;&#10;# Copy the built jar from builder stage&#10;COPY --from=builder /app/target/*.jar app.jar&#10;&#10;# Expose port&#10;EXPOSE 8080&#10;&#10;# Health check&#10;HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \&#10;  CMD java -cp app.jar org.springframework.boot.loader.JarLauncher || exit 1&#10;&#10;# Run the application&#10;ENTRYPOINT [&quot;java&quot;, &quot;-jar&quot;, &quot;app.jar&quot;]&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/pom.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/pom.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;&#10;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&#10;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&#10;&#10;    &lt;groupId&gt;com.example&lt;/groupId&gt;&#10;    &lt;artifactId&gt;persona-api&lt;/artifactId&gt;&#10;    &lt;version&gt;1.0.0&lt;/version&gt;&#10;    &lt;packaging&gt;jar&lt;/packaging&gt;&#10;&#10;    &lt;name&gt;Persona API&lt;/name&gt;&#10;    &lt;description&gt;Simple Spring Boot API for managing Personas&lt;/description&gt;&#10;&#10;    &lt;parent&gt;&#10;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;&#10;        &lt;version&gt;3.1.5&lt;/version&gt;&#10;        &lt;relativePath/&gt;&#10;    &lt;/parent&gt;&#10;&#10;    &lt;properties&gt;&#10;        &lt;java.version&gt;17&lt;/java.version&gt;&#10;    &lt;/properties&gt;&#10;&#10;    &lt;dependencies&gt;&#10;        &lt;!-- Spring Boot Web --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Spring Boot Data JPA --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- PostgreSQL Driver --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.postgresql&lt;/groupId&gt;&#10;            &lt;artifactId&gt;postgresql&lt;/artifactId&gt;&#10;            &lt;version&gt;42.6.0&lt;/version&gt;&#10;            &lt;scope&gt;runtime&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Lombok --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;&#10;            &lt;artifactId&gt;lombok&lt;/artifactId&gt;&#10;            &lt;optional&gt;true&lt;/optional&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Spring Boot Test --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;    &lt;/dependencies&gt;&#10;&#10;    &lt;build&gt;&#10;        &lt;plugins&gt;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;&#10;                &lt;configuration&gt;&#10;                    &lt;excludes&gt;&#10;                        &lt;exclude&gt;&#10;                            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;&#10;                            &lt;artifactId&gt;lombok&lt;/artifactId&gt;&#10;                        &lt;/exclude&gt;&#10;                    &lt;/excludes&gt;&#10;                &lt;/configuration&gt;&#10;            &lt;/plugin&gt;&#10;        &lt;/plugins&gt;&#10;    &lt;/build&gt;&#10;&#10;&lt;/project&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/PersonaApiApplication.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/PersonaApiApplication.java" />
              <option name="updatedContent" value="package com.example;&#10;&#10;import org.springframework.boot.SpringApplication;&#10;import org.springframework.boot.autoconfigure.SpringBootApplication;&#10;&#10;@SpringBootApplication&#10;public class PersonaApiApplication {&#10;&#10;    public static void main(String[] args) {&#10;        SpringApplication.run(PersonaApiApplication.class, args);&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/controller/PersonaController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/controller/PersonaController.java" />
              <option name="updatedContent" value="package com.example.controller;&#10;&#10;import com.example.dto.PersonaDTO;&#10;import com.example.service.PersonaService;&#10;import lombok.RequiredArgsConstructor;&#10;import org.springframework.http.HttpStatus;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.*;&#10;import java.util.List;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api/personas&quot;)&#10;@RequiredArgsConstructor&#10;@CrossOrigin(origins = &quot;*&quot;)&#10;public class PersonaController {&#10;&#10;    private final PersonaService personaService;&#10;&#10;    @PostMapping&#10;    public ResponseEntity&lt;PersonaDTO&gt; crearPersona(@RequestBody PersonaDTO personaDTO) {&#10;        PersonaDTO personaCreada = personaService.crearPersona(personaDTO);&#10;        return ResponseEntity.status(HttpStatus.CREATED).body(personaCreada);&#10;    }&#10;&#10;    @GetMapping&#10;    public ResponseEntity&lt;List&lt;PersonaDTO&gt;&gt; obtenerPersonas() {&#10;        List&lt;PersonaDTO&gt; personas = personaService.obtenerTodasLasPersonas();&#10;        return ResponseEntity.ok(personas);&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/dto/PersonaDTO.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/dto/PersonaDTO.java" />
              <option name="updatedContent" value="package com.example.dto;&#10;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;@Data&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;public class PersonaDTO {&#10;&#10;    private Long id;&#10;    private Long dni;&#10;    private String nombre;&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/model/Persona.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/model/Persona.java" />
              <option name="updatedContent" value="package com.example.model;&#10;&#10;import jakarta.persistence.*;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;@Entity&#10;@Table(name = &quot;personas&quot;)&#10;@Data&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;public class Persona {&#10;&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;&#10;    @Column(nullable = false, unique = true)&#10;    private Long dni;&#10;&#10;    @Column(nullable = false)&#10;    private String nombre;&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/repository/PersonaRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/repository/PersonaRepository.java" />
              <option name="updatedContent" value="package com.example.repository;&#10;&#10;import com.example.model.Persona;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;import org.springframework.stereotype.Repository;&#10;&#10;@Repository&#10;public interface PersonaRepository extends JpaRepository&lt;Persona, Long&gt; {&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/service/PersonaService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/service/PersonaService.java" />
              <option name="updatedContent" value="package com.example.service;&#10;&#10;import com.example.dto.PersonaDTO;&#10;import com.example.model.Persona;&#10;import com.example.repository.PersonaRepository;&#10;import lombok.RequiredArgsConstructor;&#10;import org.springframework.stereotype.Service;&#10;import java.util.List;&#10;import java.util.stream.Collectors;&#10;&#10;@Service&#10;@RequiredArgsConstructor&#10;public class PersonaService {&#10;&#10;    private final PersonaRepository personaRepository;&#10;&#10;    public PersonaDTO crearPersona(PersonaDTO personaDTO) {&#10;        Persona persona = new Persona();&#10;        persona.setDni(personaDTO.getDni());&#10;        persona.setNombre(personaDTO.getNombre());&#10;&#10;        Persona personaGuardada = personaRepository.save(persona);&#10;&#10;        return convertirADTO(personaGuardada);&#10;    }&#10;&#10;    public List&lt;PersonaDTO&gt; obtenerTodasLasPersonas() {&#10;        return personaRepository.findAll()&#10;                .stream()&#10;                .map(this::convertirADTO)&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    private PersonaDTO convertirADTO(Persona persona) {&#10;        return new PersonaDTO(&#10;                persona.getId(),&#10;                persona.getDni(),&#10;                persona.getNombre()&#10;        );&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/resources/application.properties">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/resources/application.properties" />
              <option name="updatedContent" value="spring.application.name=persona-api&#10;&#10;# PostgreSQL Connection to Supabase&#10;spring.datasource.url=jdbc:postgresql://aws-1-us-east-2.pooler.supabase.com:6543/postgres?user=postgres.vrmopcgqccizpjknsqnh&amp;password=demeterlaw&#10;spring.datasource.driver-class-name=org.postgresql.Driver&#10;spring.datasource.username=postgres.vrmopcgqccizpjknsqnh&#10;spring.datasource.password=demeterlaw&#10;&#10;# JPA/Hibernate Configuration&#10;spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect&#10;spring.jpa.hibernate.ddl-auto=update&#10;spring.jpa.show-sql=false&#10;spring.jpa.properties.hibernate.format_sql=true&#10;&#10;# Server Configuration&#10;server.port=8080&#10;server.servlet.context-path=/&#10;&#10;# Logging&#10;logging.level.root=INFO&#10;logging.level.com.example=DEBUG&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>